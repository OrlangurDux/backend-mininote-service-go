name: Deploy

on:
  push:
    tags: [v*]
  pull_request:
    branches: [master]

jobs:
  build:
    strategy:
      matrix:
        go-version: [ 1.19.x ]
        os: [ ubuntu-latest ]
        mongodb-version: [ 6.0 ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: set up go 1.19
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        id: go

      - name: checkout
        uses: actions/checkout@v2

      - name: Vendor dependencies
        run: cd src/ && go mod vendor

      - name: Create environment
        run: |
          cd src/
          cp .env.default .env.test
          cp .env.default .env

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}

      - name: build and test
        run: |
          go test -v -timeout=100s -covermode=count -coverprofile=$GITHUB_WORKSPACE/profile.cov_tmp ./...
          cat $GITHUB_WORKSPACE/profile.cov_tmp | grep -v "mocks" | grep -v "_mock" > $GITHUB_WORKSPACE/profile.cov
        working-directory: src
        env:
          SMTP_HOST: ${{vars.SMTP_HOST}}
          SMTP_LOGIN: ${{vars.SMTP_LOGIN}}
          SMTP_PASSWORD: ${{secrets.SMTP_PASSWORD}}
          SMTP_PORT: ${{vars.SMTP_PORT}}
          SMTP_TO: ${{vars.SMTP_TO}}
          GOFLAGS: "-mod=vendor"
          TZ: "Europe/Moscow"

      - name: install golangci-lint and goveralls
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $GITHUB_WORKSPACE v1.48.0
          GO111MODULE=off go get -u github.com/mattn/goveralls

      - name: run linters
        run: $GITHUB_WORKSPACE/golangci-lint run
        working-directory: src
        env:
          GOFLAGS: "-mod=vendor"
          TZ: "Europe/Moscow"

      - name: submit coverage
        run: $(go env GOPATH)/bin/goveralls -service="github" -coverprofile=$GITHUB_WORKSPACE/profile.cov
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: build and deploy master image to ghcr.io and dockerhub
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          GITHUB_PACKAGE_TOKEN: ${{ secrets.PKG_TOKEN }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          USERNAME: ${{ github.actor }}
          DOCKER_HUB_USER: ${{ vars.DOCKER_HUB_USER }}
          GITHUB_SHA: ${{ github.sha}}
          GITHUB_REF: ${{ github.ref}}
        run: |
          ref="$(echo ${GITHUB_REF} | cut -d'/' -f3)"
          echo GITHUB_REF - $ref
          echo ${GITHUB_PACKAGE_TOKEN} | docker login ghcr.io -u ${USERNAME} --password-stdin
          echo ${DOCKER_HUB_TOKEN} | docker login -u ${DOCKER_HUB_USER} --password-stdin
          docker buildx build --push \
              --build-arg CI=github --build-arg GITHUB_SHA=${GITHUB_SHA} --build-arg GIT_BRANCH=${ref} \
              --platform linux/amd64,linux/arm/v7,linux/arm64 \
              -t ghcr.io/${DOCKER_HUB_USER}/service-mini-note:${ref} -t ${DOCKER_HUB_USER}/service-mini-note:${ref} .
      - name: deploy tagged (latest) to ghcr.io and dockerhub
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_PACKAGE_TOKEN: ${{ secrets.PKG_TOKEN }}
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          USERNAME: ${{ github.actor }}
          DOCKER_HUB_USER: ${{ vars.DOCKER_HUB_USER }}
          GITHUB_SHA: ${{ github.sha}}
          GITHUB_REF: ${{ github.ref}}
        run: |
          ref="$(echo ${GITHUB_REF} | cut -d'/' -f3)"
          echo GITHUB_REF - $ref
          echo ${GITHUB_PACKAGE_TOKEN} | docker login ghcr.io -u ${USERNAME} --password-stdin
          echo ${DOCKER_HUB_TOKEN} | docker login -u ${DOCKER_HUB_USER} --password-stdin
          docker buildx build --push \
              --build-arg CI=github --build-arg GITHUB_SHA=${GITHUB_SHA} --build-arg GIT_BRANCH=${ref} \
              --platform linux/amd64,linux/arm/v7,linux/arm64 \
              -t ghcr.io/${DOCKER_HUB_USER}/service-mini-note:${ref} -t ghcr.io/${DOCKER_HUB_USER}/service-mini-note:latest \
              -t ${DOCKER_HUB_USER}/service-mini-note:${ref} -t ${DOCKER_HUB_USER}/service-mini-note:latest .